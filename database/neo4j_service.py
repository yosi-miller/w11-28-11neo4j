from datetime import datetime
import uuid

class TransactionRepository:
    def __init__(self, driver):
        self.driver = driver

    def create_transaction(self, transaction_data):
        with self.driver.session() as session:
            query = """
            MERGE (source:Device {account_id: $source_id, name: $source_name, brand: $source_brand, model: $source_model})
            MERGE (target:Device {account_id: $target_id, name: $target_name, brand: $target_brand, model: $target_model})
            CREATE (source)-[t:TRANSACTION {
                transaction_id: $transaction_id,
                method: $method,
                bluetooth_version: $bluetooth_version,
                signal_strength_dbm: $signal_strength_dbm,
                distance_meters: $distance_meters,
                duration_seconds: $duration_seconds,
                timestamp: datetime($timestamp)
            }]->(target)
            RETURN t.transaction_id as transaction_id
            """

            result = session.run(query, {
                'source_id': transaction_data["devices"][0]['id'],
                'source_name': transaction_data["devices"][0]['name'],
                'source_brand': transaction_data["devices"][0]['brand'],
                'source_model': transaction_data["devices"][0]['model'],

                'target_id': transaction_data["devices"][1]['id'],
                'target_name': transaction_data["devices"][1]['name'],
                'target_brand': transaction_data["devices"][1]['brand'],
                'target_model': transaction_data["devices"][1]['model'],

                # the transaction id is generated by the uuid library
                'transaction_id': f'{transaction_data["interaction"]["from_device"]}{transaction_data["interaction"]["to_device"]}',
                'method': transaction_data['interaction']['method'],
                'bluetooth_version': transaction_data['interaction']['bluetooth_version'],
                'signal_strength_dbm': transaction_data['interaction']['signal_strength_dbm'],
                'distance_meters': transaction_data['interaction']['distance_meters'],
                'duration_seconds': transaction_data['interaction']['duration_seconds'],
                'timestamp': transaction_data['interaction']['timestamp']
            })
            return result.single()['transaction_id']
